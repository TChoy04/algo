/*A palindrome is a string that reads the same backward as forward. For example, the strings z, aaa, aba, and abccba are palindromes, but codeforces and ab are not.

The double of a string s is obtained by writing each character twice. For example, the double of seeing is sseeeeiinngg.

Given a string s, rearrange its double to form a palindrome. Output the rearranged string. It can be proven that such a rearrangement always exists.

Input
The first line of input contains t (1≤t≤1000) — the number of test cases.

The only line of each test case contains a single string s (1≤|s|≤100) consisting only of lowercase English letters.

Note that the sum of |s| over all test cases is not bounded.

Output
For each test case, output a palindromic string of length 2⋅|s| that is a rearrangement of the double of s.*/




#include <bits/stdc++.h>
using namespace std;
 
 
int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int tc;
	cin>>tc;
	while(tc--){
		string test;
		cin>>test;
		deque<char>dq;
		for(int x = 0; x<test.size(); x++){
			dq.push_back(test[x]);
			dq.push_front(test[x]);
		}
		for(char x : dq) cout<<x;
		cout<<endl;
	}
	return 0;
}
