/*
Time Complexity: O(N)
Space Complexity: O(N)
Store the leafs in an arraylist and then compare the leaves from both roots afterwards.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, vector<int>&v){
        if(!root) return;
        if(!root->left&&!root->right) v.push_back(root->val);
        helper(root->left,v);
        helper(root->right,v);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int>arr1;
        vector<int>arr2;
        helper(root1,arr1);
        helper(root2,arr2);
        return arr1==arr2;
    }
};
