Time Complexity: O(N)
Space Complexity: O(N)
//Take advantage of the fact that it is a binary search tree and only search where the answer can be.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        //Once invalid, return 0
        if(!root) return 0;
        //If current value is too low, search on the right as that will have higher values
        if(root->val<low) return 0 + rangeSumBST(root->right,low,high);
        //If current value is too high, search on the left as that will have lower values
        if(root->val>high) return 0 + rangeSumBST(root->left,low,high);
        //If value is not too high or too low, it is valid so include the current value in the result and recurse both left and right as both can be valid.
        return root->val + rangeSumBST(root->left,low,high) + rangeSumBST(root->right,low,high);
    }
};
