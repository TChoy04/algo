/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    // Encodes a tree to a single string.
    void cereal_helper(TreeNode* root, string&str){
        if(!root){
            str+= "null,";
        }else{
            str+= to_string(root->val)+",";
            cereal_helper(root->left,str);
            cereal_helper(root->right,str);
        }
    }
    string serialize(TreeNode* root) {
        string str = "";
        cereal_helper(root, str);
        return str;
    }
    TreeNode* helper(queue<string>&q){
        string s = q.front();
        q.pop();
        if(s=="null") return NULL;
        TreeNode* root = new TreeNode(stoi(s));
        root->left = helper(q);
        root->right = helper(q);
        return root;
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        string s = "";
        queue<string>q;
        for(int i = 0; i<data.size(); i++){
            if(data[i]==','){
                q.push(s);
                s = "";
            }else{
                s+= data[i];
            }
        }
        if(s.size()) q.push(s);
        return helper(q);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
