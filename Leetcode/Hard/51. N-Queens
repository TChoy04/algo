//use backtracking, keep track of diagonals and colums. there will be an attempted queen on each position of the row so there is no need to keep track of the row.

class Solution {
public:
    vector<int>cols;
    vector<int>diag;
    vector<int>diag2;
    vector<vector<string>>res;
    //0,0,1,1,2,2,3,3
    //0,3 1,2 2,1 3,0
    void helper(int queens,int n, vector<string>&current){
        if(queens==n){
            res.push_back(current);
            return;
        }
        for(int x = 0; x<n; x++){
            if(cols[x]==1 || diag[x+queens]==1 || diag2[x-queens+n-1]==1) continue;
            current[queens][x] = 'Q';
            cols[x] = 1;
            diag[x+queens]= 1;
            diag2[x-queens+n-1] = 1;
            helper(queens+1,n,current);
            cols[x] = 0;
            diag[x+queens] = 0;
            diag2[x-queens+n-1] = 0;
            current[queens][x] = '.';
        }
        
    }
    vector<vector<string>> solveNQueens(int n) {
        cols = vector<int>(n,0);
        diag = vector<int>(n*2-1,0);
        diag2 = vector<int>(n*2-1,0);
        string start = "";
        for(int i = 0; i<n; i++) start+='.';
        vector<string>current(n,start);
        helper(0,n,current);
        return res;
        
    }
};
