Time Complexity: O(NLogN)
Space Complexity: O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    //Merge two linked list
    ListNode* merge(ListNode*l1, ListNode*l2){
        //Create new linked list to return
        ListNode* l3 = new ListNode(0);
        ListNode* ret = l3;
        //Loop until one list reaches the end
        while(l1 && l2){
            //Choose lower value
            if(l1->val<l2->val){
                l3 ->next = l1;
                l1 = l1->next;
            }
            else{
                l3 ->next = l2;
                l2 = l2->next;
            }
            l3 = l3->next;
        }
        
        if(l1) l3->next = l1;
        else l3->next = l2;
        return ret->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //If list is empty return null
        if(lists.size()==0) return NULL;
        //Loop through all lists
        while(lists.size()>1){
             //Take last two elements in array
             int n = lists.size();
             ListNode* temp = lists[n-1];
             ListNode* temp2 = lists[n-2];
             //Remove both elements from array
             lists.pop_back();
             lists.pop_back();
             //Insert merged list into array
             lists.push_back(merge(temp,temp2));
        }
        //Return merged link lists
        return lists[0];
    }
};
