/**
Simple tree traversal question. Got tripped up a bit though
Iterated through tree and kept track of depth and running sum at position with index.
Put into a priority queue with a pair.
Checked for the top value, then went downwards from the priority queue in order to find the lowest depth that had this running sum.

Things I struggled with:
  - for some reason even when pq.top().first wasn't equal to maximum, the loop would keep going. Fixed by checking for when pq size is zero. (I am probably just an idiot)
  - Didn't initially populate the initial vector with a 0. I thought the if(list.size()-1<depth) list.push_back(0); clause would be enough for it to run perfectly, but I was wrong.
  - Didn't account for the case where it's a single node and has no leafs. Ran into an infinite loop (?) not sure how but was a simple fix by adding an initial check for children before running any processes. 
    If there were no children, the answer was 1
    
 */
 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int depth, vector<int> &list){
        if(!root) return;
        if(list.size()-1<depth) list.push_back(0);
        list[depth]+= root->val;
        helper(root->left,depth+1,list);
        helper(root->right,depth+1,list);
    }
    int maxLevelSum(TreeNode* root) {
        if(!root->left && !root->right) return 1;
        vector<int>res;
        res.push_back(0);
        helper(root,0,res);
        priority_queue<pair<int,int>>pq;
        for(int x = 0; x<res.size(); x++){
            pq.push({res[x],x});
        }
        int maximum = pq.top().first;
        int ans = pq.top().second;
        while(pq.top().first==maximum){
            ans = pq.top().second;
            pq.pop();
            if(pq.size()==0) break;
        }
        
        return ans+1;
    }
};
