//Time Complexity: O(N)
//Space Complexity: O(1)
/*
Thought Process:
When do you want to multiply it instead of increasing?
Maybe when ceil(k/i)<=i because then there will be no reason to increment i anymore
Utilized some test cases
14:
1 2 3 4 (14/4 = 3.5 < 4) therefore: start duplicating-> 8 12 16 
6 operations
21:
1 2 3 4 5 (21/5 = 4.2 < 5) therefore: start duplicating -> 10 15 20 25
8 operations
What if it is perfectly divisible?
Just subtract one from k/i if it is perfectly divisible as the extra one from k/i is to account for the "remainder" like in 21/5, there needs to be an extra operation to take care of going from 20 to over 21 (to 25)

*/

class Solution {
public:
    int minOperations(int k) {
        if(k==1) return 0;
        double i = 1.0;
        int res = 0;
        while(i<k){
            if(ceil(k/i)<=i){
                if(k%(int)i==0){
                    return res+k/i-1;
                }
                res+=k/i;
                break;
            }
            i++;
            res++;
        }
        return res;
    }
};
