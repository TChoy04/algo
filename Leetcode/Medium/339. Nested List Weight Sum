//Time Complexity: O(N)
//Space Complexity: O(N) 
//Space Complexity due to recursive stack. Use recursion to keep track of current depth. Pass the array into the helper function which takes an array and an index. If
// If it is a nested array, call the helper again with the nested array and increment depth by one. Add the values inside and multiply them by the current depth, 
// starting at one.

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Constructor initializes an empty nested list.
 *     NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     NestedInteger(int value);
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Set this NestedInteger to hold a single integer.
 *     void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     void add(const NestedInteger &ni);
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    int helper(vector<NestedInteger>& nestedList, int depth){
        int res = 0;
        for(int index = 0; index<nestedList.size(); index++){
            if(nestedList[index].isInteger()) res+= depth*nestedList[index].getInteger();
            else{ 
                res+= helper(nestedList[index].getList(),depth+1);
            }
        }
        return res;
    }
    int depthSum(vector<NestedInteger>& nestedList) {
        return helper(nestedList,1);
    }
};
