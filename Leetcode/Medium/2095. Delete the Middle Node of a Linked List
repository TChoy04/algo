/*
TORTOISE AND HARE INEFFICIENT

Time Complexity: O(N)
Space Complexity: O(1)

Tortoise and hare. If the end is reached, The slow pointer will be on the middle of the linked list. Iterate again and remove that index when arrived at. One pass should be possible! Redone underneath.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(!head->next) return NULL;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next){
            fast = fast->next;
            if(fast->next) fast = fast->next;
            slow = slow->next;
        }
        fast = head;
        while(fast->next && fast->next!=slow){
            fast = fast->next;
        }
        if(fast->next)fast->next = fast->next->next;
        return head;
    }
};


/*
TORTOISE AND HARE ONE PASS

Time Complexity: O(N)
Space Complexity: O(1)

If the end of the array is reached, break before incrementing the slow array so we can get the pointer right before the middle index so we can easily skip over it.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(!head->next) return NULL;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next){
            fast = fast->next;
            if(fast->next) fast = fast->next;
            else{
                break;
            }
            if(!fast->next) break;
            slow = slow->next;
        }
        slow ->next = slow->next->next;
        return head;
    }
};
