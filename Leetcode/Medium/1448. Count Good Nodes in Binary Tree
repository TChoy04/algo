/*
Time Complexity: O(N)
Space Complexity: O(N) RECURSIVE STACK SPACE
Iterate through the tree, keep track of the maximum so far while pathing to that node. If it is greater than or equal to the current max, increment result by 1. 
If greater than current max, update max and keep recursing.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int maxi, int &res){
        if(!root) return;
        if(root->val>=maxi) res++;
        maxi = max(maxi,root->val);
        helper(root->left,maxi,res);
        helper(root->right,maxi,res);
    }
    int goodNodes(TreeNode* root) {
        int res = 0;
        helper(root,root->val,res);
        return res;
    }
};
